@file:Suppress("RedundantVisibilityModifier")

package com.labijie.application.identity.`data`.pojo.dsl

import com.labijie.application.identity.`data`.UserClaimTable
import com.labijie.application.identity.`data`.UserClaimTable.claimType
import com.labijie.application.identity.`data`.UserClaimTable.claimValue
import com.labijie.application.identity.`data`.UserClaimTable.id
import com.labijie.application.identity.`data`.UserClaimTable.userId
import com.labijie.application.identity.`data`.pojo.UserClaim
import com.labijie.infra.orm.OffsetList
import java.lang.IllegalArgumentException
import kotlin.Array
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.Long
import kotlin.Number
import kotlin.String
import kotlin.Unit
import kotlin.collections.Collection
import kotlin.collections.Iterable
import kotlin.collections.List
import kotlin.collections.isNotEmpty
import kotlin.collections.last
import kotlin.collections.toList
import kotlin.reflect.KClass
import org.jetbrains.exposed.sql.Column
import org.jetbrains.exposed.sql.Op
import org.jetbrains.exposed.sql.Query
import org.jetbrains.exposed.sql.ResultRow
import org.jetbrains.exposed.sql.SortOrder
import org.jetbrains.exposed.sql.SqlExpressionBuilder
import org.jetbrains.exposed.sql.SqlExpressionBuilder.eq
import org.jetbrains.exposed.sql.and
import org.jetbrains.exposed.sql.andWhere
import org.jetbrains.exposed.sql.batchInsert
import org.jetbrains.exposed.sql.batchUpsert
import org.jetbrains.exposed.sql.deleteWhere
import org.jetbrains.exposed.sql.insert
import org.jetbrains.exposed.sql.insertIgnore
import org.jetbrains.exposed.sql.orWhere
import org.jetbrains.exposed.sql.replace
import org.jetbrains.exposed.sql.selectAll
import org.jetbrains.exposed.sql.statements.InsertStatement
import org.jetbrains.exposed.sql.statements.ReplaceStatement
import org.jetbrains.exposed.sql.statements.UpdateBuilder
import org.jetbrains.exposed.sql.statements.UpdateStatement
import org.jetbrains.exposed.sql.statements.UpsertBuilder
import org.jetbrains.exposed.sql.statements.UpsertStatement
import org.jetbrains.exposed.sql.update
import org.jetbrains.exposed.sql.upsert

/**
 * DSL support for UserClaimTable
 *
 * This code generated by an open-source project: Infra-Orm 
 * Project Site: https://github.com/hongque-pro/infra-orm.
 *
 * Generator Version: 2.1.2
 *
 *
 * Don't modify these codes !!
 *
 * Origin Exposed Table:
 * @see com.labijie.application.identity.data.UserClaimTable
 */
@kotlin.Suppress(
  "unused",
  "DuplicatedCode",
  "MemberVisibilityCanBePrivate",
  "RemoveRedundantQualifierName",
)
public object UserClaimDSL {
  public val UserClaimTable.allColumns: Array<Column<*>> by lazy {
    arrayOf(
    claimType,
    claimValue,
    userId,
    id,
    )
  }

  public fun parseRow(raw: ResultRow): UserClaim {
    val plain = UserClaim()
    plain.claimType = raw[claimType]
    plain.claimValue = raw[claimValue]
    plain.userId = raw[userId]
    plain.id = raw[id]
    return plain
  }

  public fun parseRowSelective(row: ResultRow): UserClaim {
    val plain = UserClaim()
    if(row.hasValue(claimType)) {
      plain.claimType = row[claimType]
    }
    if(row.hasValue(claimValue)) {
      plain.claimValue = row[claimValue]
    }
    if(row.hasValue(userId)) {
      plain.userId = row[userId]
    }
    if(row.hasValue(id)) {
      plain.id = row[id]
    }
    return plain
  }

  public fun <T> UserClaimTable.getColumnType(column: Column<T>): KClass<*> = when(column) {
    claimType->String::class
    claimValue->String::class
    userId->Long::class
    id->Long::class
    else->throw IllegalArgumentException("""Unknown column <${column.name}> for 'UserClaim'""")
  }

  private fun <T> UserClaim.getColumnValueString(column: Column<T>): String = when(column) {
    UserClaimTable.claimType->this.claimType
    UserClaimTable.claimValue->this.claimValue
    UserClaimTable.userId -> this.userId.toString()

    UserClaimTable.id -> this.id.toString()

    else->throw IllegalArgumentException("""Can't converter value of UserClaim::${column.name} to string.""")
  }

  @kotlin.Suppress("UNCHECKED_CAST")
  private fun <T> parseColumnValue(valueString: String, column: Column<T>): T {
    val value = when(column) {
      UserClaimTable.claimType -> valueString
      UserClaimTable.claimValue -> valueString
      UserClaimTable.userId ->valueString.toLong()
      UserClaimTable.id ->valueString.toLong()
      else->throw IllegalArgumentException("""Can't converter value of UserClaim::${column.name} to string.""")
    }
    return value as T
  }

  @kotlin.Suppress("UNCHECKED_CAST")
  public fun <T> UserClaim.getColumnValue(column: Column<T>): T = when(column) {
    UserClaimTable.claimType->this.claimType as T
    UserClaimTable.claimValue->this.claimValue as T
    UserClaimTable.userId->this.userId as T
    UserClaimTable.id->this.id as T
    else->throw IllegalArgumentException("""Unknown column <${column.name}> for 'UserClaim'""")
  }

  public fun assign(
    builder: UpdateBuilder<*>,
    raw: UserClaim,
    selective: Array<out Column<*>>? = null,
    vararg ignore: Column<*>,
  ) {
    val list = if(selective.isNullOrEmpty()) null else selective
    if((list == null || list.contains(claimType)) && !ignore.contains(claimType))
      builder[claimType] = raw.claimType
    if((list == null || list.contains(claimValue)) && !ignore.contains(claimValue))
      builder[claimValue] = raw.claimValue
    if((list == null || list.contains(userId)) && !ignore.contains(userId))
      builder[userId] = raw.userId
    if((list == null || list.contains(id)) && !ignore.contains(id))
      builder[id] = raw.id
  }

  public fun ResultRow.toUserClaim(vararg selective: Column<*>): UserClaim {
    if(selective.isNotEmpty()) {
      return parseRowSelective(this)
    }
    return parseRow(this)
  }

  public fun Iterable<ResultRow>.toUserClaimList(vararg selective: Column<*>): List<UserClaim> = this.map {
    it.toUserClaim(*selective)
  }

  public fun UserClaimTable.selectSlice(vararg selective: Column<*>): Query {
    val query = if(selective.isNotEmpty()) {
      select(selective.toList())
    }
    else {
      selectAll()
    }
    return query
  }

  public fun UpdateBuilder<*>.setValue(raw: UserClaim, vararg ignore: Column<*>): Unit = assign(this, raw, ignore = ignore)

  public fun UpdateBuilder<*>.setValueSelective(raw: UserClaim, vararg selective: Column<*>): Unit = assign(this, raw, selective = selective)

  public fun UserClaimTable.insert(raw: UserClaim): InsertStatement<Number> = insert {
    assign(it, raw)
  }

  public fun UserClaimTable.insertIgnore(raw: UserClaim): InsertStatement<Long> = insertIgnore {
    assign(it, raw)
  }

  public fun UserClaimTable.upsert(
    raw: UserClaim,
    onUpdateExclude: List<Column<*>>? = null,
    onUpdate: (UpsertBuilder.(UpdateStatement) -> Unit)? = null,
    `where`: (SqlExpressionBuilder.() -> Op<Boolean>)? = null,
  ): UpsertStatement<Long> = upsert(where = where, onUpdate = onUpdate, onUpdateExclude = onUpdateExclude) {
    assign(it, raw)
  }

  public fun UserClaimTable.batchInsert(
    list: Iterable<UserClaim>,
    ignoreErrors: Boolean = false,
    shouldReturnGeneratedValues: Boolean = false,
  ): List<ResultRow> {
    val rows = batchInsert(list, ignoreErrors, shouldReturnGeneratedValues) {
      entry -> assign(this, entry)
    }
    return rows
  }

  public fun UserClaimTable.batchUpsert(
    list: Iterable<UserClaim>,
    onUpdateExclude: List<Column<*>>? = null,
    onUpdate: (UpsertBuilder.(UpdateStatement) -> Unit)? = null,
    shouldReturnGeneratedValues: Boolean = false,
    `where`: (SqlExpressionBuilder.() -> Op<Boolean>)? = null,
  ): List<ResultRow> {
    val rows =  batchUpsert(data = list, keys = arrayOf(id), onUpdate = onUpdate, onUpdateExclude = onUpdateExclude, where = where, shouldReturnGeneratedValues = shouldReturnGeneratedValues) {
      data: UserClaim-> assign(this, data)
    }
    return rows
  }

  public fun UserClaimTable.update(
    raw: UserClaim,
    selective: Array<out Column<*>>? = null,
    ignore: Array<out Column<*>>? = null,
    limit: Int? = null,
    `where`: SqlExpressionBuilder.() -> Op<Boolean>,
  ): Int = update(`where`, limit) {
    val ignoreColumns = ignore ?: arrayOf()
    assign(it, raw, selective = selective, *ignoreColumns)
  }

  public fun UserClaimTable.updateByPrimaryKey(raw: UserClaim, vararg selective: Column<*>): Int = update(raw, selective = selective, ignore = arrayOf(id)) {
    UserClaimTable.id.eq(raw.id)
  }

  public fun UserClaimTable.updateByPrimaryKey(id: Long, builder: UserClaimTable.(UpdateStatement) -> Unit): Int = update({ UserClaimTable.id.eq(id) }, body = builder)

  public fun UserClaimTable.deleteByPrimaryKey(id: Long): Int = deleteWhere {
    UserClaimTable.id.eq(id)
  }

  public fun UserClaimTable.selectByPrimaryKey(id: Long, vararg selective: Column<*>): UserClaim? {
    val query = selectSlice(*selective).andWhere {
      UserClaimTable.id.eq(id)
    }
    return query.firstOrNull()?.toUserClaim(*selective)
  }

  public fun UserClaimTable.selectByPrimaryKeys(ids: Iterable<Long>, vararg selective: Column<*>): List<UserClaim> {
    val query = selectSlice(*selective).andWhere {
      UserClaimTable.id inList ids
    }
    return query.toUserClaimList(*selective)
  }

  public fun UserClaimTable.selectMany(vararg selective: Column<*>, `where`: Query.() -> Query?): List<UserClaim> {
    val query = selectSlice(*selective)
    `where`.invoke(query)
    return query.toUserClaimList(*selective)
  }

  public fun UserClaimTable.selectOne(vararg selective: Column<*>, `where`: Query.() -> Query?): UserClaim? {
    val query = selectSlice(*selective)
    `where`.invoke(query)
    return query.firstOrNull()?.toUserClaim(*selective)
  }

  public fun UserClaimTable.selectForwardByPrimaryKey(
    forwardToken: String? = null,
    order: SortOrder = SortOrder.DESC,
    pageSize: Int = 50,
    selective: Collection<Column<*>> = listOf(),
    `where`: (Query.() -> Query?)? = null,
  ): OffsetList<UserClaim> {
    if(pageSize < 1) {
      return OffsetList.empty()
    }
    val offsetKey = forwardToken?.let { OffsetList.decodeToken(it).firstOrNull()?.ifBlank { null } }
    val query = selectSlice(*selective.toTypedArray())
    offsetKey?.let {
      val keyValue = parseColumnValue(it, id)
      when(order) {
        SortOrder.DESC, SortOrder.DESC_NULLS_FIRST, SortOrder.DESC_NULLS_LAST->
        query.andWhere { id less keyValue }
        else-> query.andWhere { id greater keyValue }
      }
    }
    `where`?.invoke(query)
    val sorted = query.orderBy(id, order)
    val list = sorted.limit(pageSize + 1).toUserClaimList(*selective.toTypedArray()).toMutableList()
    val dataCount = list.size
    val token = if(dataCount > pageSize) {
      list.removeLast()
      val idString = list.last().getColumnValueString(id)
      OffsetList.encodeToken(idString)
    }
    else {
      null
    }
    return OffsetList(list, token)
  }

  public fun <T : Comparable<T>> UserClaimTable.selectForward(
    sortColumn: Column<T>,
    forwardToken: String? = null,
    order: SortOrder = SortOrder.DESC,
    pageSize: Int = 50,
    selective: Collection<Column<*>> = listOf(),
    `where`: (Query.() -> Query?)? = null,
  ): OffsetList<UserClaim> {
    if(pageSize < 1) {
      return OffsetList.empty()
    }
    if(sortColumn == id) {
      return this.selectForwardByPrimaryKey(forwardToken, order, pageSize, selective, `where`)
    }
    val kp = forwardToken?.let { if(it.isNotBlank()) OffsetList.decodeToken(it) else null }
    val offsetKey = if(!kp.isNullOrEmpty()) parseColumnValue(kp.first(), sortColumn) else null
    val lastId = if(kp != null && kp.size > 1 && kp[1].isNotBlank()) parseColumnValue(kp[1], id) else null
    val query = selectSlice(*selective.toTypedArray())
    offsetKey?.let {
      when(order) {
        SortOrder.DESC, SortOrder.DESC_NULLS_FIRST, SortOrder.DESC_NULLS_LAST->
        query.andWhere { sortColumn less it }
        else-> query.andWhere { sortColumn greater it }
      }
    }
    if(lastId != null && offsetKey != null) {
      when(order) {
        SortOrder.DESC, SortOrder.DESC_NULLS_FIRST, SortOrder.DESC_NULLS_LAST->
        query.orWhere { sortColumn.eq(offsetKey) and id.less(lastId) }
        else-> query.orWhere { sortColumn.eq(offsetKey) and id.greater(lastId) }
      }
    }
    `where`?.invoke(query)
    val sorted = query.orderBy(Pair(sortColumn, order), Pair(id, order))
    val list = sorted.limit(pageSize + 1).toUserClaimList(*selective.toTypedArray()).toMutableList()
    val dataCount = list.size
    val token = if(dataCount > pageSize) {
      list.removeLast()
      val idToEncode = list.last().getColumnValueString(id)
      val sortKey = list.last().getColumnValueString(sortColumn)
      OffsetList.encodeToken(arrayOf(sortKey, idToEncode))
    }
    else null
    return OffsetList(list, token)
  }

  public fun UserClaimTable.replace(raw: UserClaim): ReplaceStatement<Long> = replace {
    assign(it, raw)
  }
}
