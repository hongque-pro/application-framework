@file:Suppress("RedundantVisibilityModifier")

package com.labijie.application.identity.`data`.pojo.dsl

import com.labijie.application.identity.`data`.RoleTable
import com.labijie.application.identity.`data`.RoleTable.concurrencyStamp
import com.labijie.application.identity.`data`.RoleTable.id
import com.labijie.application.identity.`data`.RoleTable.name
import com.labijie.application.identity.`data`.pojo.Role
import com.labijie.infra.orm.OffsetList
import java.lang.IllegalArgumentException
import kotlin.Array
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.Long
import kotlin.Number
import kotlin.String
import kotlin.Unit
import kotlin.collections.Collection
import kotlin.collections.Iterable
import kotlin.collections.List
import kotlin.collections.isNotEmpty
import kotlin.collections.last
import kotlin.collections.toList
import kotlin.reflect.KClass
import org.jetbrains.exposed.sql.Column
import org.jetbrains.exposed.sql.Op
import org.jetbrains.exposed.sql.Query
import org.jetbrains.exposed.sql.ResultRow
import org.jetbrains.exposed.sql.SortOrder
import org.jetbrains.exposed.sql.SqlExpressionBuilder
import org.jetbrains.exposed.sql.SqlExpressionBuilder.eq
import org.jetbrains.exposed.sql.and
import org.jetbrains.exposed.sql.andWhere
import org.jetbrains.exposed.sql.batchInsert
import org.jetbrains.exposed.sql.batchUpsert
import org.jetbrains.exposed.sql.deleteWhere
import org.jetbrains.exposed.sql.insert
import org.jetbrains.exposed.sql.insertIgnore
import org.jetbrains.exposed.sql.orWhere
import org.jetbrains.exposed.sql.replace
import org.jetbrains.exposed.sql.selectAll
import org.jetbrains.exposed.sql.statements.InsertStatement
import org.jetbrains.exposed.sql.statements.ReplaceStatement
import org.jetbrains.exposed.sql.statements.UpdateBuilder
import org.jetbrains.exposed.sql.statements.UpdateStatement
import org.jetbrains.exposed.sql.statements.UpsertBuilder
import org.jetbrains.exposed.sql.statements.UpsertStatement
import org.jetbrains.exposed.sql.update
import org.jetbrains.exposed.sql.upsert

/**
 * DSL support for RoleTable
 *
 * This code generated by an open-source project: Infra-Orm 
 * Project Site: https://github.com/hongque-pro/infra-orm.
 *
 * Generator Version: 2.1.2
 *
 *
 * Don't modify these codes !!
 *
 * Origin Exposed Table:
 * @see com.labijie.application.identity.data.RoleTable
 */
@kotlin.Suppress(
  "unused",
  "DuplicatedCode",
  "MemberVisibilityCanBePrivate",
  "RemoveRedundantQualifierName",
)
public object RoleDSL {
  public val RoleTable.allColumns: Array<Column<*>> by lazy {
    arrayOf(
    concurrencyStamp,
    name,
    id,
    )
  }

  public fun parseRow(raw: ResultRow): Role {
    val plain = Role()
    plain.concurrencyStamp = raw[concurrencyStamp]
    plain.name = raw[name]
    plain.id = raw[id]
    return plain
  }

  public fun parseRowSelective(row: ResultRow): Role {
    val plain = Role()
    if(row.hasValue(concurrencyStamp)) {
      plain.concurrencyStamp = row[concurrencyStamp]
    }
    if(row.hasValue(name)) {
      plain.name = row[name]
    }
    if(row.hasValue(id)) {
      plain.id = row[id]
    }
    return plain
  }

  public fun <T> RoleTable.getColumnType(column: Column<T>): KClass<*> = when(column) {
    concurrencyStamp->String::class
    name->String::class
    id->Long::class
    else->throw IllegalArgumentException("""Unknown column <${column.name}> for 'Role'""")
  }

  private fun <T> Role.getColumnValueString(column: Column<T>): String = when(column) {
    RoleTable.concurrencyStamp->this.concurrencyStamp
    RoleTable.name->this.name
    RoleTable.id -> this.id.toString()

    else->throw IllegalArgumentException("""Can't converter value of Role::${column.name} to string.""")
  }

  @kotlin.Suppress("UNCHECKED_CAST")
  private fun <T> parseColumnValue(valueString: String, column: Column<T>): T {
    val value = when(column) {
      RoleTable.concurrencyStamp -> valueString
      RoleTable.name -> valueString
      RoleTable.id ->valueString.toLong()
      else->throw IllegalArgumentException("""Can't converter value of Role::${column.name} to string.""")
    }
    return value as T
  }

  @kotlin.Suppress("UNCHECKED_CAST")
  public fun <T> Role.getColumnValue(column: Column<T>): T = when(column) {
    RoleTable.concurrencyStamp->this.concurrencyStamp as T
    RoleTable.name->this.name as T
    RoleTable.id->this.id as T
    else->throw IllegalArgumentException("""Unknown column <${column.name}> for 'Role'""")
  }

  public fun assign(
    builder: UpdateBuilder<*>,
    raw: Role,
    selective: Array<out Column<*>>? = null,
    vararg ignore: Column<*>,
  ) {
    val list = if(selective.isNullOrEmpty()) null else selective
    if((list == null || list.contains(concurrencyStamp)) && !ignore.contains(concurrencyStamp))
      builder[concurrencyStamp] = raw.concurrencyStamp
    if((list == null || list.contains(name)) && !ignore.contains(name))
      builder[name] = raw.name
    if((list == null || list.contains(id)) && !ignore.contains(id))
      builder[id] = raw.id
  }

  public fun ResultRow.toRole(vararg selective: Column<*>): Role {
    if(selective.isNotEmpty()) {
      return parseRowSelective(this)
    }
    return parseRow(this)
  }

  public fun Iterable<ResultRow>.toRoleList(vararg selective: Column<*>): List<Role> = this.map {
    it.toRole(*selective)
  }

  public fun RoleTable.selectSlice(vararg selective: Column<*>): Query {
    val query = if(selective.isNotEmpty()) {
      select(selective.toList())
    }
    else {
      selectAll()
    }
    return query
  }

  public fun UpdateBuilder<*>.setValue(raw: Role, vararg ignore: Column<*>): Unit = assign(this, raw, ignore = ignore)

  public fun UpdateBuilder<*>.setValueSelective(raw: Role, vararg selective: Column<*>): Unit = assign(this, raw, selective = selective)

  public fun RoleTable.insert(raw: Role): InsertStatement<Number> = insert {
    assign(it, raw)
  }

  public fun RoleTable.insertIgnore(raw: Role): InsertStatement<Long> = insertIgnore {
    assign(it, raw)
  }

  public fun RoleTable.upsert(
    raw: Role,
    onUpdateExclude: List<Column<*>>? = null,
    onUpdate: (UpsertBuilder.(UpdateStatement) -> Unit)? = null,
    `where`: (SqlExpressionBuilder.() -> Op<Boolean>)? = null,
  ): UpsertStatement<Long> = upsert(where = where, onUpdate = onUpdate, onUpdateExclude = onUpdateExclude) {
    assign(it, raw)
  }

  public fun RoleTable.batchInsert(
    list: Iterable<Role>,
    ignoreErrors: Boolean = false,
    shouldReturnGeneratedValues: Boolean = false,
  ): List<ResultRow> {
    val rows = batchInsert(list, ignoreErrors, shouldReturnGeneratedValues) {
      entry -> assign(this, entry)
    }
    return rows
  }

  public fun RoleTable.batchUpsert(
    list: Iterable<Role>,
    onUpdateExclude: List<Column<*>>? = null,
    onUpdate: (UpsertBuilder.(UpdateStatement) -> Unit)? = null,
    shouldReturnGeneratedValues: Boolean = false,
    `where`: (SqlExpressionBuilder.() -> Op<Boolean>)? = null,
  ): List<ResultRow> {
    val rows =  batchUpsert(data = list, keys = arrayOf(id), onUpdate = onUpdate, onUpdateExclude = onUpdateExclude, where = where, shouldReturnGeneratedValues = shouldReturnGeneratedValues) {
      data: Role-> assign(this, data)
    }
    return rows
  }

  public fun RoleTable.update(
    raw: Role,
    selective: Array<out Column<*>>? = null,
    ignore: Array<out Column<*>>? = null,
    limit: Int? = null,
    `where`: SqlExpressionBuilder.() -> Op<Boolean>,
  ): Int = update(`where`, limit) {
    val ignoreColumns = ignore ?: arrayOf()
    assign(it, raw, selective = selective, *ignoreColumns)
  }

  public fun RoleTable.updateByPrimaryKey(raw: Role, vararg selective: Column<*>): Int = update(raw, selective = selective, ignore = arrayOf(id)) {
    RoleTable.id.eq(raw.id)
  }

  public fun RoleTable.updateByPrimaryKey(id: Long, builder: RoleTable.(UpdateStatement) -> Unit): Int = update({ RoleTable.id.eq(id) }, body = builder)

  public fun RoleTable.deleteByPrimaryKey(id: Long): Int = deleteWhere {
    RoleTable.id.eq(id)
  }

  public fun RoleTable.selectByPrimaryKey(id: Long, vararg selective: Column<*>): Role? {
    val query = selectSlice(*selective).andWhere {
      RoleTable.id.eq(id)
    }
    return query.firstOrNull()?.toRole(*selective)
  }

  public fun RoleTable.selectByPrimaryKeys(ids: Iterable<Long>, vararg selective: Column<*>): List<Role> {
    val query = selectSlice(*selective).andWhere {
      RoleTable.id inList ids
    }
    return query.toRoleList(*selective)
  }

  public fun RoleTable.selectMany(vararg selective: Column<*>, `where`: Query.() -> Query?): List<Role> {
    val query = selectSlice(*selective)
    `where`.invoke(query)
    return query.toRoleList(*selective)
  }

  public fun RoleTable.selectOne(vararg selective: Column<*>, `where`: Query.() -> Query?): Role? {
    val query = selectSlice(*selective)
    `where`.invoke(query)
    return query.firstOrNull()?.toRole(*selective)
  }

  public fun RoleTable.selectForwardByPrimaryKey(
    forwardToken: String? = null,
    order: SortOrder = SortOrder.DESC,
    pageSize: Int = 50,
    selective: Collection<Column<*>> = listOf(),
    `where`: (Query.() -> Query?)? = null,
  ): OffsetList<Role> {
    if(pageSize < 1) {
      return OffsetList.empty()
    }
    val offsetKey = forwardToken?.let { OffsetList.decodeToken(it).firstOrNull()?.ifBlank { null } }
    val query = selectSlice(*selective.toTypedArray())
    offsetKey?.let {
      val keyValue = parseColumnValue(it, id)
      when(order) {
        SortOrder.DESC, SortOrder.DESC_NULLS_FIRST, SortOrder.DESC_NULLS_LAST->
        query.andWhere { id less keyValue }
        else-> query.andWhere { id greater keyValue }
      }
    }
    `where`?.invoke(query)
    val sorted = query.orderBy(id, order)
    val list = sorted.limit(pageSize + 1).toRoleList(*selective.toTypedArray()).toMutableList()
    val dataCount = list.size
    val token = if(dataCount > pageSize) {
      list.removeLast()
      val idString = list.last().getColumnValueString(id)
      OffsetList.encodeToken(idString)
    }
    else {
      null
    }
    return OffsetList(list, token)
  }

  public fun <T : Comparable<T>> RoleTable.selectForward(
    sortColumn: Column<T>,
    forwardToken: String? = null,
    order: SortOrder = SortOrder.DESC,
    pageSize: Int = 50,
    selective: Collection<Column<*>> = listOf(),
    `where`: (Query.() -> Query?)? = null,
  ): OffsetList<Role> {
    if(pageSize < 1) {
      return OffsetList.empty()
    }
    if(sortColumn == id) {
      return this.selectForwardByPrimaryKey(forwardToken, order, pageSize, selective, `where`)
    }
    val kp = forwardToken?.let { if(it.isNotBlank()) OffsetList.decodeToken(it) else null }
    val offsetKey = if(!kp.isNullOrEmpty()) parseColumnValue(kp.first(), sortColumn) else null
    val lastId = if(kp != null && kp.size > 1 && kp[1].isNotBlank()) parseColumnValue(kp[1], id) else null
    val query = selectSlice(*selective.toTypedArray())
    offsetKey?.let {
      when(order) {
        SortOrder.DESC, SortOrder.DESC_NULLS_FIRST, SortOrder.DESC_NULLS_LAST->
        query.andWhere { sortColumn less it }
        else-> query.andWhere { sortColumn greater it }
      }
    }
    if(lastId != null && offsetKey != null) {
      when(order) {
        SortOrder.DESC, SortOrder.DESC_NULLS_FIRST, SortOrder.DESC_NULLS_LAST->
        query.orWhere { sortColumn.eq(offsetKey) and id.less(lastId) }
        else-> query.orWhere { sortColumn.eq(offsetKey) and id.greater(lastId) }
      }
    }
    `where`?.invoke(query)
    val sorted = query.orderBy(Pair(sortColumn, order), Pair(id, order))
    val list = sorted.limit(pageSize + 1).toRoleList(*selective.toTypedArray()).toMutableList()
    val dataCount = list.size
    val token = if(dataCount > pageSize) {
      list.removeLast()
      val idToEncode = list.last().getColumnValueString(id)
      val sortKey = list.last().getColumnValueString(sortColumn)
      OffsetList.encodeToken(arrayOf(sortKey, idToEncode))
    }
    else null
    return OffsetList(list, token)
  }

  public fun RoleTable.replace(raw: Role): ReplaceStatement<Long> = replace {
    assign(it, raw)
  }
}
